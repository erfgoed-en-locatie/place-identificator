{% extends "layout.html.twig" %}

{% block content %}
    <div class="row">
        <div class="col-md-12">
            <p>Je werkt in dataset "<a href="{{ path('datasets-show', {'id': dataset.id }) }}">{{ dataset.name }}</a>"</p>

            <div id="resultnav">
                <a href="/datasets/{{ dataset.id }}/standardized">Gestandaardiseerd ({{ dataset.countStandardized }})</a><a class="current" href="/datasets/{{ dataset.id }}/multiples">Meerdere resultaten ({{ dataset.countMultiples }})</a><a href="/datasets/{{ dataset.id }}/noresults">Geen resultaten ({{ dataset.countNoResults }})</a><a href="/datasets/{{ dataset.id }}/unmappables">Onachterhaalbaar({{ dataset.countUnmappables }})</a><a href="/datasets/{{ dataset.id }}/download">Download</a>
            </div>

            <div class="row">
                <div class="col-md-4">
                    <h3>Meerdere resultaten voor "{{ rec.original_name }}"</h3>
                    <p>Klik op het juiste resultaat hieronder of op het respectievelijke icoon op de kaart.</p>

                    <ul>
                        {% for opt in possibilities.data %}
                            <li>
                                {% for src,pit in opt %}
                                    {{ pit.name }} - {{ pit.type }}, volgens {{ src }}
                                {% endfor %}
                            </li>
                        {% endfor %}
                    </ul>

                </div>

                <div class="col-md-8">

                    <div id="mapcanvas">

                    </div>

                </div>
            </div>

        </div>
    </div>

    <script>
        /** OpenStreetMap config */
        var southWest = L.latLng(51.175, 3.001), northEast = L.latLng(53.549, 7.483), bounds = L.latLngBounds(southWest, northEast);
        var map = L.map('mapcanvas').fitBounds(bounds);

        coordsToLatLng = function (multiCoords) {
            var out = [];
            for (coords of multiCoords)
                out.push([coords[1], coords[0]]);
            return out;
        };

        L.tileLayer('//{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        var mapIcon = L.icon({
            iconUrl: '/images/map-marker-128x128.png',
            iconSize:     [32, 32], // size of the icon
            shadowSize:   [50, 64], // size of the shadow
            iconAnchor:   [16, 32], // point of the icon which will correspond to marker's location
            shadowAnchor: [4, 62],  // the same for the shadow
            popupAnchor:  [-3, -26] // point from which the popup should open relative to the iconAnchor
        });

        var pits = new Array();

        {% for opt in possibilities.data %}
            {% for src,pit in opt %}
                {% if pit.geometry is not empty and pit.geometry.type == 'Point' %}
                    var marker = L.marker([{{ pit.geometry.coordinates[1] }}, {{ pit.geometry.coordinates[0] }}], {icon: mapIcon}).addTo(map)
                        .bindPopup('' +
                        '<span><strong>{{ pit.name }} - {{ pit.type }}</strong> volgens {{ src }}</span>' +
                        '<a href="/api/record/choose-pit/{{ app.request.get('recid') }}" class="btn-sm btn-primary choose" data-klont="{{ opt|json_encode }}">kies</a>'
                    );
                    pits.push(marker);

                {% elseif pit.geometry is not empty and pit.geometry.type == 'Polygon' %}
                    // van de polygon moeten we de lat,lon omdraaien
                    var marker = L.polygon(coordsToLatLng({{ pit.geometry.coordinates[0]|json_encode }})).addTo(map)
                        .bindPopup('' +
                            '<span><strong>{{ pit.name }} - {{ pit.type }}</strong> volgens {{ src }}</span>' +
                            '<a href="/api/record/choose-pit/{{ app.request.get('recid') }}" class="btn-sm btn-primary choose" data-klont="{{ opt|json_encode }}">kies</a>'
                    );
                    pits.push(marker);

                {% endif %}
            {% endfor %}
        {% endfor %}

        var group = new L.featureGroup(pits);
        map.fitBounds(group);

        jQuery(function () {
            // reset a mapped record
            $(document).on( "click", "a.choose", function(e) {
                e.preventDefault();
                var data = $(this).attr('data-klont');
                var uri = $(this).attr('href');
                askAPI('POST', uri, data, forwardUser);
            });

            function forwardUser(json) {
                var one = Number(jQuery('#nr-one').html()) +1;
                var more = Number(jQuery('#nr-more').html()) -1;
                setNumbers(one,null,null,more);

                alertMessage('De plaats is gestandaardiseerd.');
            }


        });
    </script>

{% endblock %}
