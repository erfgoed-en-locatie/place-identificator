{% extends "layout.html.twig" %}

{% block content %}
    <div class="row">
        <div class="col-md-12">
            <p>Je werkt in dataset "<a href="/datasets/{{ dataset.id }}">{{ dataset.name }}</a>"</p>

            <div id="resultnav">
                <a href="/datasets/{{ dataset.id }}/standardized">Gestandaardiseerd ({{ dataset.countStandardized }})</a><a class="current" href="/datasets/{{ dataset.id }}/multiples">Meerdere resultaten ({{ dataset.countMultiples }})</a><a href="/datasets/{{ dataset.id }}/noresults">Geen resultaten ({{ dataset.countNoResults }})</a><a href="/datasets/{{ dataset.id }}/download">Download</a>
            </div>


            <div class="row">
                <div class="col-md-4">
                    <h3>Meerdere resultaten voor "{{ rec.original_name }}"</h3>
                    <p>Klik op het juiste resultaat hieronder of op het respectievelijke icoon op de kaart.</p>


                </div>

                <div class="col-md-8">

                    <div id="mapcanvas">

                    </div>

                </div>
            </div>

        </div>
    </div>


    <script>

        /** OpenStreetMap config */
                {% if mapFocus is defined %}
        var map = L.map('mapcanvas').setView([ {{ mapFocus[1]}}, {{ mapFocus[0]}}], 10);
        {% else %}
        var map = L.map('mapcanvas').setView([52.079, 5.077], 8);
        {% endif %}


        L.tileLayer('//{s}.tile.osm.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        var mapIcon = L.icon({
            iconUrl: '/images/map-marker-128x128.png',
            iconSize:     [32, 32], // size of the icon
            shadowSize:   [50, 64], // size of the shadow
            iconAnchor:   [16, 32], // point of the icon which will correspond to marker's location
            shadowAnchor: [4, 62],  // the same for the shadow
            popupAnchor:  [-3, -26] // point from which the popup should open relative to the iconAnchor
        });

        function onEachFeature(feature, layer) {
            var popupContent = "<p>Plaats type: " +
                    feature.properties.type + ", " +feature.properties.pits[0].name + "</p>";

            if (feature.properties && feature.properties.popupContent) {
                popupContent += feature.properties.popupContent;
            }

            layer.bindPopup(popupContent);
        }

        L.geoJson([{{ geoJson|raw }}], {
            icon: mapIcon,
            onEachFeature: onEachFeature,
        } )
                .addTo(map);

    </script>

{% endblock %}
